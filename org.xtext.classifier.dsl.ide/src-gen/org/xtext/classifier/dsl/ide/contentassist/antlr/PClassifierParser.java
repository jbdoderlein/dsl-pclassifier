/*
 * generated by Xtext 2.26.0
 */
package org.xtext.classifier.dsl.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.classifier.dsl.ide.contentassist.antlr.internal.InternalPClassifierParser;
import org.xtext.classifier.dsl.services.PClassifierGrammarAccess;

public class PClassifierParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(PClassifierGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, PClassifierGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getStatementAccess().getAlternatives(), "rule__Statement__Alternatives");
			builder.put(grammarAccess.getMLModelAccess().getAlternatives(), "rule__MLModel__Alternatives");
			builder.put(grammarAccess.getEvaluationAccess().getAlternatives(), "rule__Evaluation__Alternatives");
			builder.put(grammarAccess.getClassifierAccess().getGroup(), "rule__Classifier__Group__0");
			builder.put(grammarAccess.getTrainAccess().getGroup(), "rule__Train__Group__0");
			builder.put(grammarAccess.getEvalAccess().getGroup(), "rule__Eval__Group__0");
			builder.put(grammarAccess.getLoadAccess().getGroup(), "rule__Load__Group__0");
			builder.put(grammarAccess.getSaveAccess().getGroup(), "rule__Save__Group__0");
			builder.put(grammarAccess.getFeatureListAccess().getGroup(), "rule__FeatureList__Group__0");
			builder.put(grammarAccess.getFeatureListAccess().getGroup_2(), "rule__FeatureList__Group_2__0");
			builder.put(grammarAccess.getEvaluationListAccess().getGroup(), "rule__EvaluationList__Group__0");
			builder.put(grammarAccess.getEvaluationListAccess().getGroup_2(), "rule__EvaluationList__Group_2__0");
			builder.put(grammarAccess.getPClassfierAccess().getElementsAssignment(), "rule__PClassfier__ElementsAssignment");
			builder.put(grammarAccess.getClassifierAccess().getNameAssignment_1(), "rule__Classifier__NameAssignment_1");
			builder.put(grammarAccess.getClassifierAccess().getFeaturesAssignment_5(), "rule__Classifier__FeaturesAssignment_5");
			builder.put(grammarAccess.getClassifierAccess().getTargetAssignment_8(), "rule__Classifier__TargetAssignment_8");
			builder.put(grammarAccess.getClassifierAccess().getModelAssignment_11(), "rule__Classifier__ModelAssignment_11");
			builder.put(grammarAccess.getTrainAccess().getNameAssignment_1(), "rule__Train__NameAssignment_1");
			builder.put(grammarAccess.getTrainAccess().getDatasetAssignment_5(), "rule__Train__DatasetAssignment_5");
			builder.put(grammarAccess.getTrainAccess().getSplitAssignment_8(), "rule__Train__SplitAssignment_8");
			builder.put(grammarAccess.getEvalAccess().getNameAssignment_1(), "rule__Eval__NameAssignment_1");
			builder.put(grammarAccess.getEvalAccess().getEvaluationsAssignment_5(), "rule__Eval__EvaluationsAssignment_5");
			builder.put(grammarAccess.getLoadAccess().getNameAssignment_1(), "rule__Load__NameAssignment_1");
			builder.put(grammarAccess.getLoadAccess().getFileAssignment_5(), "rule__Load__FileAssignment_5");
			builder.put(grammarAccess.getSaveAccess().getNameAssignment_1(), "rule__Save__NameAssignment_1");
			builder.put(grammarAccess.getSaveAccess().getFileAssignment_5(), "rule__Save__FileAssignment_5");
			builder.put(grammarAccess.getFeatureListAccess().getValsAssignment_1(), "rule__FeatureList__ValsAssignment_1");
			builder.put(grammarAccess.getFeatureListAccess().getValsAssignment_2_1(), "rule__FeatureList__ValsAssignment_2_1");
			builder.put(grammarAccess.getEvaluationListAccess().getValsAssignment_1(), "rule__EvaluationList__ValsAssignment_1");
			builder.put(grammarAccess.getEvaluationListAccess().getValsAssignment_2_1(), "rule__EvaluationList__ValsAssignment_2_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private PClassifierGrammarAccess grammarAccess;

	@Override
	protected InternalPClassifierParser createParser() {
		InternalPClassifierParser result = new InternalPClassifierParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public PClassifierGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(PClassifierGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
