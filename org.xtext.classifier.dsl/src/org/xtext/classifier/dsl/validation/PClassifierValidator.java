/*
 * generated by Xtext 2.26.0
 */
package org.xtext.classifier.dsl.validation;

import org.xtext.classifier.dsl.pClassifier.Train;
import org.xtext.classifier.dsl.pClassifier.Classifier;
import org.xtext.classifier.dsl.pClassifier.Eval;
import org.xtext.classifier.dsl.pClassifier.Load;
import org.xtext.classifier.dsl.pClassifier.Save;

import java.util.ArrayList;
import java.util.List;

import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;
import org.xtext.classifier.dsl.pClassifier.PClassifierPackage;
import org.xtext.classifier.dsl.pClassifier.Statement;
import org.xtext.classifier.dsl.pClassifier.PClassfier;

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
public class PClassifierValidator extends AbstractPClassifierValidator {
	
    @Check(CheckType.NORMAL)
    public void checkModelNameExistStatement(Statement statement) {
    	if (statement instanceof Train || statement instanceof Eval || statement instanceof Save) {
    		List<String> models = new ArrayList<String>();
    		PClassfier superBlock = ((PClassfier) statement.eContainer());
    		for (Statement other : superBlock.getElements()) {
    			if ((other instanceof Classifier || other instanceof Load) && !models.contains(other.getName())) {
    				models.add(other.getName());
    			}
    		}
    		
    		if (!models.contains(statement.getName())) {
    			error(statement.getName()+" classifier is not defined", PClassifierPackage.Literals.STATEMENT__NAME);
    		}
    	}    	
    }
	
}
