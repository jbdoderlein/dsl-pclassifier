/**
 * generated by Xtext 2.26.0
 */
package org.xtext.classifier.dsl.pClassifier.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.classifier.dsl.pClassifier.EvaluationList;
import org.xtext.classifier.dsl.pClassifier.PClassifierPackage;
import org.xtext.classifier.dsl.pClassifier.Train;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Train</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.classifier.dsl.pClassifier.impl.TrainImpl#getDataset <em>Dataset</em>}</li>
 *   <li>{@link org.xtext.classifier.dsl.pClassifier.impl.TrainImpl#getSplit <em>Split</em>}</li>
 *   <li>{@link org.xtext.classifier.dsl.pClassifier.impl.TrainImpl#getEvaluations <em>Evaluations</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TrainImpl extends StatementImpl implements Train
{
  /**
   * The default value of the '{@link #getDataset() <em>Dataset</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDataset()
   * @generated
   * @ordered
   */
  protected static final String DATASET_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDataset() <em>Dataset</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDataset()
   * @generated
   * @ordered
   */
  protected String dataset = DATASET_EDEFAULT;

  /**
   * The default value of the '{@link #getSplit() <em>Split</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSplit()
   * @generated
   * @ordered
   */
  protected static final double SPLIT_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getSplit() <em>Split</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSplit()
   * @generated
   * @ordered
   */
  protected double split = SPLIT_EDEFAULT;

  /**
   * The cached value of the '{@link #getEvaluations() <em>Evaluations</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvaluations()
   * @generated
   * @ordered
   */
  protected EvaluationList evaluations;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TrainImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PClassifierPackage.Literals.TRAIN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDataset()
  {
    return dataset;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDataset(String newDataset)
  {
    String oldDataset = dataset;
    dataset = newDataset;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PClassifierPackage.TRAIN__DATASET, oldDataset, dataset));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public double getSplit()
  {
    return split;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSplit(double newSplit)
  {
    double oldSplit = split;
    split = newSplit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PClassifierPackage.TRAIN__SPLIT, oldSplit, split));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EvaluationList getEvaluations()
  {
    return evaluations;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetEvaluations(EvaluationList newEvaluations, NotificationChain msgs)
  {
    EvaluationList oldEvaluations = evaluations;
    evaluations = newEvaluations;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PClassifierPackage.TRAIN__EVALUATIONS, oldEvaluations, newEvaluations);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEvaluations(EvaluationList newEvaluations)
  {
    if (newEvaluations != evaluations)
    {
      NotificationChain msgs = null;
      if (evaluations != null)
        msgs = ((InternalEObject)evaluations).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PClassifierPackage.TRAIN__EVALUATIONS, null, msgs);
      if (newEvaluations != null)
        msgs = ((InternalEObject)newEvaluations).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PClassifierPackage.TRAIN__EVALUATIONS, null, msgs);
      msgs = basicSetEvaluations(newEvaluations, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PClassifierPackage.TRAIN__EVALUATIONS, newEvaluations, newEvaluations));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PClassifierPackage.TRAIN__EVALUATIONS:
        return basicSetEvaluations(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PClassifierPackage.TRAIN__DATASET:
        return getDataset();
      case PClassifierPackage.TRAIN__SPLIT:
        return getSplit();
      case PClassifierPackage.TRAIN__EVALUATIONS:
        return getEvaluations();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PClassifierPackage.TRAIN__DATASET:
        setDataset((String)newValue);
        return;
      case PClassifierPackage.TRAIN__SPLIT:
        setSplit((Double)newValue);
        return;
      case PClassifierPackage.TRAIN__EVALUATIONS:
        setEvaluations((EvaluationList)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PClassifierPackage.TRAIN__DATASET:
        setDataset(DATASET_EDEFAULT);
        return;
      case PClassifierPackage.TRAIN__SPLIT:
        setSplit(SPLIT_EDEFAULT);
        return;
      case PClassifierPackage.TRAIN__EVALUATIONS:
        setEvaluations((EvaluationList)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PClassifierPackage.TRAIN__DATASET:
        return DATASET_EDEFAULT == null ? dataset != null : !DATASET_EDEFAULT.equals(dataset);
      case PClassifierPackage.TRAIN__SPLIT:
        return split != SPLIT_EDEFAULT;
      case PClassifierPackage.TRAIN__EVALUATIONS:
        return evaluations != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (dataset: ");
    result.append(dataset);
    result.append(", split: ");
    result.append(split);
    result.append(')');
    return result.toString();
  }

} //TrainImpl
