/**
 * generated by Xtext 2.26.0
 */
package org.xtext.classifier.dsl.pClassifier.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.xtext.classifier.dsl.pClassifier.Evaluation;
import org.xtext.classifier.dsl.pClassifier.PClassifierPackage;
import org.xtext.classifier.dsl.pClassifier.Run;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Run</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.classifier.dsl.pClassifier.impl.RunImpl#getDataset <em>Dataset</em>}</li>
 *   <li>{@link org.xtext.classifier.dsl.pClassifier.impl.RunImpl#getSplit <em>Split</em>}</li>
 *   <li>{@link org.xtext.classifier.dsl.pClassifier.impl.RunImpl#getEvaluation <em>Evaluation</em>}</li>
 * </ul>
 *
 * @generated
 */
public class RunImpl extends StatementImpl implements Run
{
  /**
   * The default value of the '{@link #getDataset() <em>Dataset</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDataset()
   * @generated
   * @ordered
   */
  protected static final String DATASET_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDataset() <em>Dataset</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDataset()
   * @generated
   * @ordered
   */
  protected String dataset = DATASET_EDEFAULT;

  /**
   * The default value of the '{@link #getSplit() <em>Split</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSplit()
   * @generated
   * @ordered
   */
  protected static final double SPLIT_EDEFAULT = 0.0;

  /**
   * The cached value of the '{@link #getSplit() <em>Split</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSplit()
   * @generated
   * @ordered
   */
  protected double split = SPLIT_EDEFAULT;

  /**
   * The default value of the '{@link #getEvaluation() <em>Evaluation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvaluation()
   * @generated
   * @ordered
   */
  protected static final Evaluation EVALUATION_EDEFAULT = Evaluation.ACCURACY;

  /**
   * The cached value of the '{@link #getEvaluation() <em>Evaluation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getEvaluation()
   * @generated
   * @ordered
   */
  protected Evaluation evaluation = EVALUATION_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected RunImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PClassifierPackage.Literals.RUN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDataset()
  {
    return dataset;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDataset(String newDataset)
  {
    String oldDataset = dataset;
    dataset = newDataset;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PClassifierPackage.RUN__DATASET, oldDataset, dataset));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public double getSplit()
  {
    return split;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSplit(double newSplit)
  {
    double oldSplit = split;
    split = newSplit;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PClassifierPackage.RUN__SPLIT, oldSplit, split));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Evaluation getEvaluation()
  {
    return evaluation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setEvaluation(Evaluation newEvaluation)
  {
    Evaluation oldEvaluation = evaluation;
    evaluation = newEvaluation == null ? EVALUATION_EDEFAULT : newEvaluation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PClassifierPackage.RUN__EVALUATION, oldEvaluation, evaluation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PClassifierPackage.RUN__DATASET:
        return getDataset();
      case PClassifierPackage.RUN__SPLIT:
        return getSplit();
      case PClassifierPackage.RUN__EVALUATION:
        return getEvaluation();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PClassifierPackage.RUN__DATASET:
        setDataset((String)newValue);
        return;
      case PClassifierPackage.RUN__SPLIT:
        setSplit((Double)newValue);
        return;
      case PClassifierPackage.RUN__EVALUATION:
        setEvaluation((Evaluation)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PClassifierPackage.RUN__DATASET:
        setDataset(DATASET_EDEFAULT);
        return;
      case PClassifierPackage.RUN__SPLIT:
        setSplit(SPLIT_EDEFAULT);
        return;
      case PClassifierPackage.RUN__EVALUATION:
        setEvaluation(EVALUATION_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PClassifierPackage.RUN__DATASET:
        return DATASET_EDEFAULT == null ? dataset != null : !DATASET_EDEFAULT.equals(dataset);
      case PClassifierPackage.RUN__SPLIT:
        return split != SPLIT_EDEFAULT;
      case PClassifierPackage.RUN__EVALUATION:
        return evaluation != EVALUATION_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (dataset: ");
    result.append(dataset);
    result.append(", split: ");
    result.append(split);
    result.append(", evaluation: ");
    result.append(evaluation);
    result.append(')');
    return result.toString();
  }

} //RunImpl
