/*
 * generated by Xtext 2.26.0
 */
grammar InternalPClassifier;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.classifier.dsl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.classifier.dsl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.classifier.dsl.services.PClassifierGrammarAccess;

}

@parser::members {

 	private PClassifierGrammarAccess grammarAccess;

    public InternalPClassifierParser(TokenStream input, PClassifierGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "PClassfier";
   	}

   	@Override
   	protected PClassifierGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRulePClassfier
entryRulePClassfier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPClassfierRule()); }
	iv_rulePClassfier=rulePClassfier
	{ $current=$iv_rulePClassfier.current; }
	EOF;

// Rule PClassfier
rulePClassfier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getPClassfierAccess().getElementsStatementParserRuleCall_0());
			}
			lv_elements_0_0=ruleStatement
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getPClassfierRule());
				}
				add(
					$current,
					"elements",
					lv_elements_0_0,
					"org.xtext.classifier.dsl.PClassifier.Statement");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleStatement
entryRuleStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatementRule()); }
	iv_ruleStatement=ruleStatement
	{ $current=$iv_ruleStatement.current; }
	EOF;

// Rule Statement
ruleStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatementAccess().getClassifierParserRuleCall_0());
		}
		this_Classifier_0=ruleClassifier
		{
			$current = $this_Classifier_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getTrainParserRuleCall_1());
		}
		this_Train_1=ruleTrain
		{
			$current = $this_Train_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getExecuteParserRuleCall_2());
		}
		this_Execute_2=ruleExecute
		{
			$current = $this_Execute_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getLoadParserRuleCall_3());
		}
		this_Load_3=ruleLoad
		{
			$current = $this_Load_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatementAccess().getSaveParserRuleCall_4());
		}
		this_Save_4=ruleSave
		{
			$current = $this_Save_4.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleClassifier
entryRuleClassifier returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getClassifierRule()); }
	iv_ruleClassifier=ruleClassifier
	{ $current=$iv_ruleClassifier.current; }
	EOF;

// Rule Classifier
ruleClassifier returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Classifier('
		{
			newLeafNode(otherlv_0, grammarAccess.getClassifierAccess().getClassifierKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getClassifierAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassifierRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='){'
		{
			newLeafNode(otherlv_2, grammarAccess.getClassifierAccess().getRightParenthesisLeftCurlyBracketKeyword_2());
		}
		otherlv_3='features'
		{
			newLeafNode(otherlv_3, grammarAccess.getClassifierAccess().getFeaturesKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getClassifierAccess().getColonKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassifierAccess().getFeaturesFeatureListParserRuleCall_5_0());
				}
				lv_features_5_0=ruleFeatureList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassifierRule());
					}
					set(
						$current,
						"features",
						lv_features_5_0,
						"org.xtext.classifier.dsl.PClassifier.FeatureList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='target'
		{
			newLeafNode(otherlv_6, grammarAccess.getClassifierAccess().getTargetKeyword_6());
		}
		otherlv_7=':'
		{
			newLeafNode(otherlv_7, grammarAccess.getClassifierAccess().getColonKeyword_7());
		}
		(
			(
				lv_target_8_0=RULE_STRING
				{
					newLeafNode(lv_target_8_0, grammarAccess.getClassifierAccess().getTargetSTRINGTerminalRuleCall_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getClassifierRule());
					}
					setWithLastConsumed(
						$current,
						"target",
						lv_target_8_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_9='model'
		{
			newLeafNode(otherlv_9, grammarAccess.getClassifierAccess().getModelKeyword_9());
		}
		otherlv_10=':'
		{
			newLeafNode(otherlv_10, grammarAccess.getClassifierAccess().getColonKeyword_10());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getClassifierAccess().getModelMLModelEnumRuleCall_11_0());
				}
				lv_model_11_0=ruleMLModel
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getClassifierRule());
					}
					set(
						$current,
						"model",
						lv_model_11_0,
						"org.xtext.classifier.dsl.PClassifier.MLModel");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getClassifierAccess().getRightCurlyBracketKeyword_12());
		}
	)
;

// Entry rule entryRuleTrain
entryRuleTrain returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTrainRule()); }
	iv_ruleTrain=ruleTrain
	{ $current=$iv_ruleTrain.current; }
	EOF;

// Rule Train
ruleTrain returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Train('
		{
			newLeafNode(otherlv_0, grammarAccess.getTrainAccess().getTrainKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getTrainAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTrainRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='){'
		{
			newLeafNode(otherlv_2, grammarAccess.getTrainAccess().getRightParenthesisLeftCurlyBracketKeyword_2());
		}
		otherlv_3='dataset'
		{
			newLeafNode(otherlv_3, grammarAccess.getTrainAccess().getDatasetKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getTrainAccess().getColonKeyword_4());
		}
		(
			(
				lv_dataset_5_0=RULE_STRING
				{
					newLeafNode(lv_dataset_5_0, grammarAccess.getTrainAccess().getDatasetSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTrainRule());
					}
					setWithLastConsumed(
						$current,
						"dataset",
						lv_dataset_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6='split'
		{
			newLeafNode(otherlv_6, grammarAccess.getTrainAccess().getSplitKeyword_6());
		}
		otherlv_7=':'
		{
			newLeafNode(otherlv_7, grammarAccess.getTrainAccess().getColonKeyword_7());
		}
		(
			(
				lv_split_8_0=RULE_FLOAT
				{
					newLeafNode(lv_split_8_0, grammarAccess.getTrainAccess().getSplitFLOATTerminalRuleCall_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTrainRule());
					}
					setWithLastConsumed(
						$current,
						"split",
						lv_split_8_0,
						"org.xtext.classifier.dsl.PClassifier.FLOAT");
				}
			)
		)
		otherlv_9='evaluations'
		{
			newLeafNode(otherlv_9, grammarAccess.getTrainAccess().getEvaluationsKeyword_9());
		}
		otherlv_10=':'
		{
			newLeafNode(otherlv_10, grammarAccess.getTrainAccess().getColonKeyword_10());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTrainAccess().getEvaluationsEvaluationListParserRuleCall_11_0());
				}
				lv_evaluations_11_0=ruleEvaluationList
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTrainRule());
					}
					set(
						$current,
						"evaluations",
						lv_evaluations_11_0,
						"org.xtext.classifier.dsl.PClassifier.EvaluationList");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_12='}'
		{
			newLeafNode(otherlv_12, grammarAccess.getTrainAccess().getRightCurlyBracketKeyword_12());
		}
	)
;

// Entry rule entryRuleExecute
entryRuleExecute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExecuteRule()); }
	iv_ruleExecute=ruleExecute
	{ $current=$iv_ruleExecute.current; }
	EOF;

// Rule Execute
ruleExecute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Execute('
		{
			newLeafNode(otherlv_0, grammarAccess.getExecuteAccess().getExecuteKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getExecuteAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExecuteRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='){'
		{
			newLeafNode(otherlv_2, grammarAccess.getExecuteAccess().getRightParenthesisLeftCurlyBracketKeyword_2());
		}
		otherlv_3='input'
		{
			newLeafNode(otherlv_3, grammarAccess.getExecuteAccess().getInputKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getExecuteAccess().getColonKeyword_4());
		}
		(
			(
				lv_input_5_0=RULE_STRING
				{
					newLeafNode(lv_input_5_0, grammarAccess.getExecuteAccess().getInputSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExecuteRule());
					}
					setWithLastConsumed(
						$current,
						"input",
						lv_input_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6='output'
		{
			newLeafNode(otherlv_6, grammarAccess.getExecuteAccess().getOutputKeyword_6());
		}
		otherlv_7=':'
		{
			newLeafNode(otherlv_7, grammarAccess.getExecuteAccess().getColonKeyword_7());
		}
		(
			(
				lv_output_8_0=RULE_STRING
				{
					newLeafNode(lv_output_8_0, grammarAccess.getExecuteAccess().getOutputSTRINGTerminalRuleCall_8_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExecuteRule());
					}
					setWithLastConsumed(
						$current,
						"output",
						lv_output_8_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getExecuteAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleLoad
entryRuleLoad returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLoadRule()); }
	iv_ruleLoad=ruleLoad
	{ $current=$iv_ruleLoad.current; }
	EOF;

// Rule Load
ruleLoad returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Load('
		{
			newLeafNode(otherlv_0, grammarAccess.getLoadAccess().getLoadKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getLoadAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLoadRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='){'
		{
			newLeafNode(otherlv_2, grammarAccess.getLoadAccess().getRightParenthesisLeftCurlyBracketKeyword_2());
		}
		otherlv_3='file'
		{
			newLeafNode(otherlv_3, grammarAccess.getLoadAccess().getFileKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getLoadAccess().getColonKeyword_4());
		}
		(
			(
				lv_file_5_0=RULE_STRING
				{
					newLeafNode(lv_file_5_0, grammarAccess.getLoadAccess().getFileSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLoadRule());
					}
					setWithLastConsumed(
						$current,
						"file",
						lv_file_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getLoadAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleSave
entryRuleSave returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSaveRule()); }
	iv_ruleSave=ruleSave
	{ $current=$iv_ruleSave.current; }
	EOF;

// Rule Save
ruleSave returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Save('
		{
			newLeafNode(otherlv_0, grammarAccess.getSaveAccess().getSaveKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getSaveAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSaveRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='){'
		{
			newLeafNode(otherlv_2, grammarAccess.getSaveAccess().getRightParenthesisLeftCurlyBracketKeyword_2());
		}
		otherlv_3='file'
		{
			newLeafNode(otherlv_3, grammarAccess.getSaveAccess().getFileKeyword_3());
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getSaveAccess().getColonKeyword_4());
		}
		(
			(
				lv_file_5_0=RULE_STRING
				{
					newLeafNode(lv_file_5_0, grammarAccess.getSaveAccess().getFileSTRINGTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSaveRule());
					}
					setWithLastConsumed(
						$current,
						"file",
						lv_file_5_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getSaveAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleFeatureList
entryRuleFeatureList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFeatureListRule()); }
	iv_ruleFeatureList=ruleFeatureList
	{ $current=$iv_ruleFeatureList.current; }
	EOF;

// Rule FeatureList
ruleFeatureList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0=','
			{
				newLeafNode(otherlv_0, grammarAccess.getFeatureListAccess().getCommaKeyword_0());
			}
		)*
		(
			(
				lv_vals_1_0=RULE_STRING
				{
					newLeafNode(lv_vals_1_0, grammarAccess.getFeatureListAccess().getValsSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFeatureListRule());
					}
					addWithLastConsumed(
						$current,
						"vals",
						lv_vals_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getFeatureListAccess().getCommaKeyword_2_0());
				}
			)+
			(
				(
					lv_vals_3_0=RULE_STRING
					{
						newLeafNode(lv_vals_3_0, grammarAccess.getFeatureListAccess().getValsSTRINGTerminalRuleCall_2_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getFeatureListRule());
						}
						addWithLastConsumed(
							$current,
							"vals",
							lv_vals_3_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)*
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getFeatureListAccess().getCommaKeyword_3());
			}
		)*
	)
;

// Entry rule entryRuleEvaluationList
entryRuleEvaluationList returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvaluationListRule()); }
	iv_ruleEvaluationList=ruleEvaluationList
	{ $current=$iv_ruleEvaluationList.current; }
	EOF;

// Rule EvaluationList
ruleEvaluationList returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0=','
			{
				newLeafNode(otherlv_0, grammarAccess.getEvaluationListAccess().getCommaKeyword_0());
			}
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getEvaluationListAccess().getValsEvaluationEnumRuleCall_1_0());
				}
				lv_vals_1_0=ruleEvaluation
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getEvaluationListRule());
					}
					add(
						$current,
						"vals",
						lv_vals_1_0,
						"org.xtext.classifier.dsl.PClassifier.Evaluation");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				otherlv_2=','
				{
					newLeafNode(otherlv_2, grammarAccess.getEvaluationListAccess().getCommaKeyword_2_0());
				}
			)+
			(
				(
					{
						newCompositeNode(grammarAccess.getEvaluationListAccess().getValsEvaluationEnumRuleCall_2_1_0());
					}
					lv_vals_3_0=ruleEvaluation
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEvaluationListRule());
						}
						add(
							$current,
							"vals",
							lv_vals_3_0,
							"org.xtext.classifier.dsl.PClassifier.Evaluation");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			otherlv_4=','
			{
				newLeafNode(otherlv_4, grammarAccess.getEvaluationListAccess().getCommaKeyword_3());
			}
		)*
	)
;

// Rule MLModel
ruleMLModel returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='DecisionTree'
			{
				$current = grammarAccess.getMLModelAccess().getDecisonTreeEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMLModelAccess().getDecisonTreeEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='SVC'
			{
				$current = grammarAccess.getMLModelAccess().getSVCEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMLModelAccess().getSVCEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='RandomForest'
			{
				$current = grammarAccess.getMLModelAccess().getRandomForestEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getMLModelAccess().getRandomForestEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='MLPClassifier'
			{
				$current = grammarAccess.getMLModelAccess().getMLPClassifierEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getMLModelAccess().getMLPClassifierEnumLiteralDeclaration_3());
			}
		)
	)
;

// Rule Evaluation
ruleEvaluation returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='accuracy'
			{
				$current = grammarAccess.getEvaluationAccess().getAccuracyEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEvaluationAccess().getAccuracyEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='f1'
			{
				$current = grammarAccess.getEvaluationAccess().getF1ScoreEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEvaluationAccess().getF1ScoreEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='recall'
			{
				$current = grammarAccess.getEvaluationAccess().getRecallEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getEvaluationAccess().getRecallEnumLiteralDeclaration_2());
			}
		)
	)
;

RULE_FLOAT : (('0'..'9')+ '.' ('0'..'9')* (('e'|'E') ('+'|'-')? ('0'..'9')+)?|'.' ('0'..'9')+ (('e'|'E') ('+'|'-')? ('0'..'9')+)?|('0'..'9')+ ('e'|'E') ('+'|'-')? ('0'..'9')+);

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
